import telebot
import time
from telebot import types
from tokens import TELE_TOKEN
from extensions_by import CryptoConverter, APIException, currencie
import re
from background import keep_alive  # –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –æ–Ω–ª–∞–π–Ω

# import bot_app_world

bot = telebot.TeleBot(TELE_TOKEN)

ls = []


@bot.message_handler(commands=['start'])
def start(message: telebot.types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç')
    btn2 = types.KeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è')
    markup.add(btn1, btn2)
    text = '–ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ—Ç-–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –∏ —è –º–æ–≥—É:  \n\n' \
           '- –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–º—É —Ä—É–±–ª—é (–ö–Ω–æ–ø–∫–∞ "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")' \
           '\n\n- –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã (–∫–Ω–æ–ø–∫–∞ "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è")' \
           '\n\n–ù–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —è –º–æ–≥—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /help'
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(commands=['help'])
def helpp(message: telebot.types.Message):
    text = '–Ø –º–æ–≥—É:  \n\n' \
           '- –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–º—É —Ä—É–±–ª—é (–ö–Ω–æ–ø–∫–∞ "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")' \
           '\n\n- –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã (–∫–Ω–æ–ø–∫–∞ "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è")' \
           '\n\n' \
           '–ù–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —è –º–æ–≥—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /help'
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['course'])
def course(message: telebot.types.Message):
    text = '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:'
    for key in currencie:
        text = '\n'.join((text, f'{currencie[key][0]} {currencie[key][1]} ({key}) = {currencie[key][2]} BYN'))
    text += f'\n\n–ü–æ –∫—É—Ä—Å—É –ù–ë –†–ë –Ω–∞ {time.strftime("%d %b %Y %H:%M:%S", time.gmtime(time.time() + 10800))}'
    text += '\n\n–ù–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —è –º–æ–≥—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /help'
    bot.send_message(message.chat.id, text)


@bot.message_handler(content_types=['text', ])
def convert(message: telebot.types.Message):
    ls.clear()
    if message.text == '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç':
        text = '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:'
        for key in currencie:
            text = '\n'.join((text, f'{currencie[key][0]} {currencie[key][1]} ({key}) = {currencie[key][2]} BYN'))
        text += f'\n\n–ü–æ –∫—É—Ä—Å—É –ù–ë –†–ë –Ω–∞ {time.strftime("%d %b %Y %H:%M:%S", time.gmtime(time.time() + 10800))}'
        text += '\n\n–ù–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —è –º–æ–≥—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /help'
        bot.send_message(message.chat.id, text)

    elif message.text == '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')

    elif re.search(r"\d+[.,]?([\d]+)?", message.text) and len(ls) == 0:
        txt = message.text
        if ',' in txt:
            txt = txt.replace(',', '.')
        try:
            ls.append(float(re.search(r"\d+[.,]?([\d]+)?", txt).group()))
            markup = types.InlineKeyboardMarkup()
            for key in currencie:
                markup.add(types.InlineKeyboardButton(
                    f'{currencie[key][3]} ({key})', callback_data=key))
            bot.send_message(message.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:', reply_markup=markup)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤—ã—à–µüëÜ')
        except:
            ValueError
    else:
        ls.clear()
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    try:
        if len(ls) == 0:
            bot.send_message(callback.message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∞—Ç–µ —Å—É–º–º—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!')
        elif len(ls) < 2:
            ls.append(callback.data)
            bot.send_message(callback.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {currencie[callback.data][3]} ({callback.data})')
            bot.send_message(callback.message.chat.id,
                             f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤—ã—à–µüëÜ')
        elif len(ls) == 2:
            bot.send_message(callback.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {currencie[callback.data][3]} ({callback.data})')
            ls.append(callback.data)

            amount, quote, base = ls
            total_base = CryptoConverter.get_price(quote, base, amount)
            text = f'{amount} {quote} = {total_base} {base}\n' \
                   f'–ü–æ –∫—É—Ä—Å—É –ù–ë –†–ë –Ω–∞ {time.strftime("%d %b %Y %H:%M:%S", time.gmtime(time.time() + 10800))}'
            bot.send_message(callback.message.chat.id, text)
            ls.clear()
    except APIException:
        bot.send_message(callback.message.chat.id, f'–Ø –Ω–µ —É–º–µ—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã')


# keep_alive() #–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –æ–Ω–ª–∞–π–Ω
if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except:
            time.sleep(1)
